Vagrant.configure("2") do |config|
  config.vm.box = "ubuntu/jammy64"

  # RÃ©seau host-only
  MASTER_IP  = "192.168.56.100"
  WORKER1_IP = "192.168.56.101"
  WORKER2_IP = "192.168.56.102"

  # Script commun pour containerd + kubeadm
  COMMON_SCRIPT = <<-SHELL
    #!/bin/bash
    set -e

    # Add hosts entries
    echo "#{MASTER_IP} master"   | sudo tee -a /etc/hosts
    echo "#{WORKER1_IP} worker1" | sudo tee -a /etc/hosts
    echo "#{WORKER2_IP} worker2" | sudo tee -a /etc/hosts

    # --- Container runtime setup ---
    sudo apt-get update
    sudo apt-get install -y jq curl apt-transport-https ca-certificates

    # Modules
    cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF
    sudo modprobe overlay
    sudo modprobe br_netfilter

    # Sysctl
    cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
    sudo sysctl --system

    # Install containerd (latest release)
    PLATFORM=$( [ $(arch) = "x86_64" ] && echo amd64 || echo arm64 )
    VER=$(curl -s https://api.github.com/repos/containerd/containerd/releases/latest | jq -r '.tag_name' | sed 's/v//')
    wget -q https://github.com/containerd/containerd/releases/download/v${VER}/containerd-${VER}-linux-${PLATFORM}.tar.gz
    sudo tar Cxzvf /usr/local containerd-${VER}-linux-${PLATFORM}.tar.gz
    rm containerd-${VER}-linux-${PLATFORM}.tar.gz

    # Config containerd
    sudo mkdir -p /etc/containerd
    containerd config default | sudo tee /etc/containerd/config.toml

    # Correctif: activer SystemdCgroup
    sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

    sudo systemctl stop containerd || true
    wget -q https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
    sudo mv containerd.service /etc/systemd/system/
    sudo systemctl daemon-reexec
    sudo systemctl enable --now containerd

    # Install runc
    RUNC_VER=$(curl -s https://api.github.com/repos/opencontainers/runc/releases/latest | jq -r '.tag_name')
    wget -q https://github.com/opencontainers/runc/releases/download/${RUNC_VER}/runc.${PLATFORM}
    sudo install -m 755 runc.${PLATFORM} /usr/local/sbin/runc
    rm runc.${PLATFORM}

    # Configure crictl
    cat <<EOF | sudo tee /etc/crictl.yaml
runtime-endpoint: unix:///run/containerd/containerd.sock
image-endpoint: unix:///run/containerd/containerd.sock
timeout: 10
debug: false
EOF

    # --- Kubernetes installation ---
    KUBE_VER=$(curl -s https://api.github.com/repos/kubernetes/kubernetes/releases/latest | jq -r '.tag_name')
    KUBE_VER=${KUBE_VER%.*}

    curl -fsSL https://pkgs.k8s.io/core:/stable:/${KUBE_VER}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/${KUBE_VER}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

    sudo apt-get update
    sudo apt-get install -y kubelet kubeadm kubectl
    sudo apt-mark hold kubelet kubeadm kubectl

    sudo swapoff -a
    sudo sed -i '/ swap / s/^/#/' /etc/fstab
  SHELL

  # --- MASTER ---
  config.vm.define "master" do |master|
    master.vm.hostname = "master"
    master.vm.network "private_network", ip: MASTER_IP
    master.vm.provider "virtualbox" do |vb|
      vb.memory = 3072
      vb.cpus = 2
    end
    master.vm.provision "shell", inline: <<-SHELL
      #{COMMON_SCRIPT}

      echo "[INFO] Initializing Kubernetes master..."
      sudo kubeadm init --apiserver-advertise-address=#{MASTER_IP} --pod-network-cidr=192.168.0.0/16 | tee /vagrant/kubeadm-init.out

      mkdir -p /home/vagrant/.kube
      sudo cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      sudo chown vagrant:vagrant /home/vagrant/.kube/config

      # Install Calico
      sudo -u vagrant kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.0/manifests/calico.yaml

      # Wait for API server ready
      echo "[INFO] Waiting for API server..."
      until nc -z #{MASTER_IP} 6443; do sleep 5; done

      # Generate join command
      kubeadm token create --print-join-command > /vagrant/join.sh
      echo "[INFO] Join command saved to /vagrant/join.sh"
    SHELL
  end

  # --- WORKERS ---
  [ ["worker1", WORKER1_IP], ["worker2", WORKER2_IP] ].each do |name, ip|
    config.vm.define name do |node|
      node.vm.hostname = name
      node.vm.network "private_network", ip: ip
      node.vm.provider "virtualbox" do |vb|
        vb.memory = 2048
        vb.cpus = 2
      end
      node.vm.provision "shell", inline: <<-SHELL
        #{COMMON_SCRIPT}

        echo "[INFO] Waiting for join.sh..."
        while [ ! -f /vagrant/join.sh ]; do sleep 5; done

        for i in {1..20}; do
          sudo bash /vagrant/join.sh && break
          echo "[WARN] Join failed, retrying in 30s..."
          sleep 30
        done
      SHELL
    end
  end
end
